name: HACS Validation

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  hacs-validation:
    runs-on: ubuntu-latest
    name: HACS Validation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install black isort flake8 mypy

      - name: Check code formatting with Black
        run: black --check custom_components/

      - name: Check import sorting with isort
        run: isort --check-only custom_components/

      - name: Lint with flake8
        run: flake8 custom_components/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type checking with mypy
        run: mypy custom_components/firewalla/ --ignore-missing-imports

  tests:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Run tests
        run: python run_tests.py

      - name: Run integration validation
        run: python validate_simple.py

  manifest-validation:
    runs-on: ubuntu-latest
    name: Manifest Validation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate manifest.json
        run: |
          python -c "
          import json
          import sys
          
          # Load and validate manifest
          with open('custom_components/firewalla/manifest.json') as f:
              manifest = json.load(f)
          
          # Required fields for HACS
          required_fields = ['domain', 'name', 'version', 'documentation', 'requirements', 'codeowners']
          missing_fields = [field for field in required_fields if field not in manifest]
          
          if missing_fields:
              print(f'Missing required fields: {missing_fields}')
              sys.exit(1)
          
          # Validate domain matches directory name
          if manifest['domain'] != 'firewalla':
              print('Domain in manifest must match directory name')
              sys.exit(1)
          
          # Validate version format
          import re
          version_pattern = r'^\d+\.\d+\.\d+$'
          if not re.match(version_pattern, manifest['version']):
              print('Version must follow semantic versioning (x.y.z)')
              sys.exit(1)
          
          print('Manifest validation passed')
          "

  documentation-check:
    runs-on: ubuntu-latest
    name: Documentation Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required documentation files
        run: |
          required_files=("README.md" "info.md" "LICENSE" "CHANGELOG.md")
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done
          
          echo "All required documentation files present"

      - name: Validate README structure
        run: |
          python -c "
          import sys
          
          with open('README.md') as f:
              content = f.read()
          
          # Check for required sections
          required_sections = [
              '# Firewalla Home Assistant Integration',
              '## Features',
              '## Installation',
              '## Configuration',
              '## Usage',
              '## Troubleshooting'
          ]
          
          missing_sections = []
          for section in required_sections:
              if section not in content:
                  missing_sections.append(section)
          
          if missing_sections:
              print(f'Missing README sections: {missing_sections}')
              sys.exit(1)
          
          print('README structure validation passed')
          "